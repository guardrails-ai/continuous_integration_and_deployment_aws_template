name: CI

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Check out head
              uses: actions/checkout@v3
              with:
                persist-credentials: false

            - name: Set up QEMU
              uses: docker/setup-qemu-action@master
              with:
                platforms: linux/amd64

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@master
              with:
                platforms: linux/amd64

            - name: Build Docker image
              uses: docker/build-push-action@v6
              with:
                context: guard
                file: guard/Dockerfile
                platforms: linux/amd64
                push: false
                tags: gr-backend-images:${{ github.sha }}
                load: true
                build-args: |
                  GUARDRAILS_TOKEN=${{ secrets.GUARDRAILS_API_KEY }}
            
            - name: Save Docker image as artifact
              run: |
                docker save gr-backend-images:${{ github.sha }} -o guardrails_image.tar

            - name: Upload Docker image artifact
              uses: actions/upload-artifact@v2
              with:
                name: guardrails_image
                path: guardrails_image.tar

    test:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Check out head
              uses: actions/checkout@v3
              with:
                persist-credentials: false

            - name: Set up QEMU
              uses: docker/setup-qemu-action@master
              with:
                platforms: linux/amd64

            - name: Download Docker image artifact
              uses: actions/download-artifact@v2
              with:
                name: guardrails_image
                path: .
        
            - name: Load Docker image
              run: |
                docker load -i guardrails_image.tar

            - name: Start Docker container
              run: |
                  docker run -d --name guardrails-container -p 8000:8000 -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} gr-backend-images:${{ github.sha }}
        
            - name: Wait for Docker container to be ready
              run: |
                for i in {1..30}; do
                if docker exec guardrails-container curl -s http://localhost:8000/; then
                    echo "Server is up!"
                    break
                fi
                echo "Waiting for server..."
                sleep 5
                done
    
            - name: Run Pytest
              run: |
                pip install pytest openai guardrails-ai
                pytest guard/tests
                docker stop guardrails-container
                docker rm guardrails-container

    deploy:
        runs-on: ubuntu-latest
        needs: test
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Check out head
              uses: actions/checkout@v3
              with:
                persist-credentials: false
    
            - name: Download Docker image artifact
              uses: actions/download-artifact@v2
              with:
                name: guardrails_image
                path: .
        
            - name: Load Docker image
              run: |
                docker load -i guardrails_image.tar
    
            - name: Retag and push Docker image
              run: |
                docker tag gr-backend-images:${{ github.sha }} gr-backend-images:latest
                echo "something like docker push ${YOUR_AWS_ACCOUNT_ID}.dkr.ecr.${YOUR_AWS_REGION}.amazonaws.com/gr-backend-images:latest"
            - name: Deploy to production
              run: |
	              echo "Deploying to production. This is typically a ecs update for aws."
	              echo "along the lines of `aws ecs update-service --cluster ${{ env.AWS_ECS_CLUSTER_NAME }} --service ${{ env.AWS_ECS_SERVICE_NAME }} --desired-count ${{ env.AWS_ECS_DESIRED_TASK_COUNT }} --force-new-deployment`"
			        env:
			          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}